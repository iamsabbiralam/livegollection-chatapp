/**
 * Represents istances of livegollection clients. It handles the websocket
 * connection with the server by sending update messages to it and dispatching the
 * received ones to the corresponding event handlers (oncreate, onupdate, ondelete).
 *
 * @typeParam IdType - The type of items' id in the underlying collection
 * @typeParam ItemType - The type of items in the underlying collection
 */
export default class LiveGollection<IdType, ItemType extends {
    id?: IdType;
}> {
    private url;
    static readonly createMethodString = "CREATE";
    static readonly updateMethodString = "UPDATE";
    static readonly deleteMethodString = "DELETE";
    private ws;
    private hasConnBeenOpened;
    private hasConnBeenClosed;
    private cachedReceivedUpdates;
    private cachedUpdatesToSend;
    private isOnCreateSet;
    private isOnUpdateSet;
    private isOnDeleteSet;
    private isOnOpenSet;
    private isOnCloseSet;
    /**
     * @remarks
     *
     * If you want to connect to a remote server you must use TLS (and wss:// in the URL protocol field).
     * ws:// is OK only if you are testing in local.
     *
     * @param url - route to the livegollection server-side websocket handler, for example "ws://localhost:8080/livegollection"
     */
    constructor(url: string);
    /**
     * Dispatches the update message to the appropriate handler between oncreate, onupdate and ondelete.
     *
     * @remarks
     *
     * Before invoking this function make sure that ALL the handlers have been set.
     * In other words `isOnCreateSet && isOnUpdateSet && isOnDeleteSet` must be true.
     *
     * @param updMess - The update message that has to be dispatched
     */
    private processUpdate;
    /**
     * Creates a NEW item in the livegollection: first the item will be added to the server collection,
     * then every client in the pool (also the one that has called this function) will receive
     * a create event (oncreate function will be invoked).
     *
     * @remarks
     *
     * If you want to add a new item to the livegollection this is the only way for doing so properly.
     *
     * @param item - The NEW item that will be added to the livegollection
     */
    create(item: ItemType): void;
    /**
     * Updates the item in the livegollection: first the item in the server collection will be updated,
     * then every client in the pool (also the one that has called this function) will receive
     * an update event (onupdate function will be invoked).
     *
     * @remarks
     *
     * If you want to modify an item in the livegollection this is the only way for doing so properly.
     *
     * @param item - The item that will be updated in the livegollection
     */
    update(item: ItemType): void;
    /**
     * Deletes the item from the livegollection: first the item in the server collection will be deleted,
     * then every client in the pool (also the one that has called this function) will receive
     * a delete event (ondelete function will be invoked).
     *
     * @remarks
     *
     * If you want to delete an item from the livegollection this is the only way for doing so properly.
     *
     * @param item - The item that will be deleted from the livegollection
     */
    delete(item: ItemType): void;
    /**
     * Crafts an update message with the given `item` and `method` and,
     * if the connection has been opened, sends it to the server.
     * Otherwise the update will be cached in `this.cachedUpdatesToSend`.
     *
     * @param method - method string for the update message
     * @param item - the item that this update message is referred to
     */
    private craftAndSendUpdateMessage;
    private _oncreate;
    private _onupdate;
    private _ondelete;
    private _onopen;
    private _onclose;
    /**
     * This event handler will be invoked when the client receives an update message from the
     * server regarding the creation of a new item. Set an appropriate handler to add the new item
     * to your local collection and update the view.
     *
     * @remarks
     *
     * You also must set onupdate and ondelete event handlers otherwise NO update will be processed (neither CREATE updates).
     *
     * @param item - The NEW item added to the livegollection
     */
    set oncreate(handler: (item: ItemType) => void);
    /**
     * This event handler will be invoked when the client receives an update message from the
     * server regarding the update of an item already in the livegollection. Set an appropriate handler
     * to modify the item in your local collection and update the view.
     *
     * @remarks
     *
     * You also must set oncreate and ondelete event handlers otherwise NO update will be processed (neither UPDATE updates).
     *
     * @param item - An item alreaday in the livegollection that has been modified
     */
    set onupdate(handler: (item: ItemType) => void);
    /**
     * This event handler will be invoked when the client receives an update message from the
     * server regarding the deletion of an item in the livegollection. Set an appropriate handler
     * to delete the item from your local collection and update the view.
     *
     * @remarks
     *
     * You also must set oncreate and onupdate event handlers otherwise NO update will be processed (neither DELETE updates).
     *
     * @param item - An item in the livegollection that has been deleted
     */
    set ondelete(handler: (item: ItemType) => void);
    /**
     * This event handler will be invoked when the underlying websocket connection has been opened.
     */
    set onopen(handler: () => void);
    /**
     * This event handler will be invoked when the underlying websocket connection has been closed.
     */
    set onclose(handler: () => void);
}
